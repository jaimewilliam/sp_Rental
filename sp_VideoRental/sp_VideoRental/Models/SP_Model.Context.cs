//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace sp_VideoRental.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class VideoRentalEntities : DbContext
    {
        public VideoRentalEntities()
            : base("name=VideoRentalEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Customer> Customers { get; set; }
        public virtual DbSet<Genre> Genres { get; set; }
        public virtual DbSet<Movy> Movies { get; set; }
        public virtual DbSet<RentalHeader> RentalHeaders { get; set; }
        public virtual DbSet<RentedMovy> RentedMovies { get; set; }
    
        public virtual ObjectResult<DisplayRecords_Result> DisplayRecords()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<DisplayRecords_Result>("DisplayRecords");
        }
    
        public virtual ObjectResult<string> SELECTCustomers(Nullable<int> customerFK)
        {
            var customerFKParameter = customerFK.HasValue ?
                new ObjectParameter("CustomerFK", customerFK) :
                new ObjectParameter("CustomerFK", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("SELECTCustomers", customerFKParameter);
        }
    
        public virtual ObjectResult<SELECTRentalHeader_Result> SELECTRentalHeader(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SELECTRentalHeader_Result>("SELECTRentalHeader", idParameter);
        }
    
        public virtual ObjectResult<SELECTRented_Result> SELECTRented(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SELECTRented_Result>("SELECTRented", idParameter);
        }
    
        public virtual ObjectResult<SELECTMovies_Result> SELECTMovies(Nullable<int> movieId)
        {
            var movieIdParameter = movieId.HasValue ?
                new ObjectParameter("MovieId", movieId) :
                new ObjectParameter("MovieId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SELECTMovies_Result>("SELECTMovies", movieIdParameter);
        }
    
        public virtual ObjectResult<SELECTGenres_Result> SELECTGenres()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SELECTGenres_Result>("SELECTGenres");
        }
    
        public virtual int UPDATERentalHeader(Nullable<int> rentalID, Nullable<int> customerFK, Nullable<System.DateTime> dateRented)
        {
            var rentalIDParameter = rentalID.HasValue ?
                new ObjectParameter("RentalID", rentalID) :
                new ObjectParameter("RentalID", typeof(int));
    
            var customerFKParameter = customerFK.HasValue ?
                new ObjectParameter("CustomerFK", customerFK) :
                new ObjectParameter("CustomerFK", typeof(int));
    
            var dateRentedParameter = dateRented.HasValue ?
                new ObjectParameter("DateRented", dateRented) :
                new ObjectParameter("DateRented", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UPDATERentalHeader", rentalIDParameter, customerFKParameter, dateRentedParameter);
        }
    
        public virtual int UPDATERentedMovies(Nullable<int> rentedID, Nullable<int> movieFK, Nullable<System.DateTime> dateReturned)
        {
            var rentedIDParameter = rentedID.HasValue ?
                new ObjectParameter("RentedID", rentedID) :
                new ObjectParameter("RentedID", typeof(int));
    
            var movieFKParameter = movieFK.HasValue ?
                new ObjectParameter("MovieFK", movieFK) :
                new ObjectParameter("MovieFK", typeof(int));
    
            var dateReturnedParameter = dateReturned.HasValue ?
                new ObjectParameter("DateReturned", dateReturned) :
                new ObjectParameter("DateReturned", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UPDATERentedMovies", rentedIDParameter, movieFKParameter, dateReturnedParameter);
        }
    
        public virtual int INSERTRentalHeader(Nullable<int> customerFK, Nullable<System.DateTime> dateRented)
        {
            var customerFKParameter = customerFK.HasValue ?
                new ObjectParameter("CustomerFK", customerFK) :
                new ObjectParameter("CustomerFK", typeof(int));
    
            var dateRentedParameter = dateRented.HasValue ?
                new ObjectParameter("DateRented", dateRented) :
                new ObjectParameter("DateRented", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("INSERTRentalHeader", customerFKParameter, dateRentedParameter);
        }
    
        public virtual int INSERTRentedMovies(Nullable<int> movieFK, Nullable<System.DateTime> dateReturned, Nullable<int> rentalFK)
        {
            var movieFKParameter = movieFK.HasValue ?
                new ObjectParameter("MovieFK", movieFK) :
                new ObjectParameter("MovieFK", typeof(int));
    
            var dateReturnedParameter = dateReturned.HasValue ?
                new ObjectParameter("DateReturned", dateReturned) :
                new ObjectParameter("DateReturned", typeof(System.DateTime));
    
            var rentalFKParameter = rentalFK.HasValue ?
                new ObjectParameter("RentalFK", rentalFK) :
                new ObjectParameter("RentalFK", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("INSERTRentedMovies", movieFKParameter, dateReturnedParameter, rentalFKParameter);
        }
    
        public virtual int DELETERentedMovies(Nullable<int> rentedID)
        {
            var rentedIDParameter = rentedID.HasValue ?
                new ObjectParameter("RentedID", rentedID) :
                new ObjectParameter("RentedID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DELETERentedMovies", rentedIDParameter);
        }
    
        public virtual int DELETERentalHeader(Nullable<int> rentalID)
        {
            var rentalIDParameter = rentalID.HasValue ?
                new ObjectParameter("RentalID", rentalID) :
                new ObjectParameter("RentalID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DELETERentalHeader", rentalIDParameter);
        }
    
        public virtual int DELETERentedMoviesbyRentalFK(Nullable<int> rentalFK)
        {
            var rentalFKParameter = rentalFK.HasValue ?
                new ObjectParameter("RentalFK", rentalFK) :
                new ObjectParameter("RentalFK", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DELETERentedMoviesbyRentalFK", rentalFKParameter);
        }
    }
}
